1. Static Routes:- A route that always points to the same page.

Example:
app/
â”œâ”€ page.tsx         â†’ "/"
â”œâ”€ about/
â”‚  â””â”€ page.tsx      â†’ "/about"
â”œâ”€ contact/
â”‚  â””â”€ page.tsx      â†’ "/contact"

/ â†’ HomePage
/about â†’ AboutPage
/contact â†’ ContactPage

ðŸ‘‰ Always the same, no dynamic values.
---------------------------------------------------------------------------------------------------------

ðŸ”¹ 2. Dynamic Routes:- When the URL changes based on a variable (like id, slug).

Syntax: [param]
Example:
app/
â””â”€ blog/
   â”œâ”€ page.tsx        â†’ "/blog"
   â””â”€ [slug]/
      â””â”€ page.tsx     â†’ "/blog/:slug"

/blog/hello-world â†’ shows post with slug = "hello-world"
/blog/nextjs-guide â†’ shows post with slug = "nextjs-guide"

ðŸ‘‰ Used for blogs, user profiles, product details, etc.
-----------------------------------------------------------------------------------------------------------

ðŸ”¹ 6. Nested Routes:- You can create routes inside routes by nesting folders.

Example:
app/
â””â”€ dashboard/
   â”œâ”€ page.tsx        â†’ "/dashboard"
   â”œâ”€ settings/
   â”‚  â””â”€ page.tsx     â†’ "/dashboard/settings"
   â””â”€ users/
      â””â”€ [id]/
         â””â”€ page.tsx  â†’ "/dashboard/users/:id"


ðŸ‘‰ Very common for admin panels, dashboards.

-------------------------------------------------------------------------------------------------------------------

ðŸ”¹ 3. Catch-All Routes:- When you donâ€™t know how many segments will come.

Syntax: [...param]
Example:
app/
â””â”€ docs/
   â””â”€ [...slug]/
      â””â”€ page.tsx   â†’ "/docs/*"

/docs â†’ empty array []
/docs/getting-started â†’ slug = ["getting-started"]
/docs/guides/setup/first-step â†’ slug = ["guides", "setup", "first-step"]

ðŸ‘‰ Useful for docs, breadcrumbs, nested categories.

------------------------------------------------------------------------------------------------------------

ðŸ”¹ 4. Optional Catch-All Routes:- Like catch-all, but the parameter can also be missing.

Syntax: [[...param]]
Example:
app/
â””â”€ shop/
   â””â”€ [[...filters]]/
      â””â”€ page.tsx


/shop â†’ filters = []
/shop/clothes â†’ filters = ["clothes"]
/shop/clothes/men â†’ filters = ["clothes", "men"]

ðŸ‘‰ Nice for filtering/search pages.
---------------------------------------------------------------------------------------------------------------

ðŸ”¹ 5. Route Groups:- Group folders just for organization, but they donâ€™t appear in the URL.

Syntax: (groupName)
Example:
app/
â””â”€ (marketing)/
   â”œâ”€ about/
   â”‚  â””â”€ page.tsx   â†’ "/about"
   â”œâ”€ contact/
   â”‚  â””â”€ page.tsx   â†’ "/contact"


URL is still /about, /contact
(marketing) is ignored in the URL, only for folder structure.

ðŸ‘‰ Helps organize large projects.
-------------------------------------------------------------------------------------------------------------------

ðŸ”¹ 7. Parallel Routes (advanced ðŸš€):- Used to render multiple pages at the same time in different slots.

Syntax: @slotName
Example:
app/
â””â”€ dashboard/
   â”œâ”€ @analytics/
   â”‚  â””â”€ page.tsx
   â”œâ”€ @team/
   â”‚  â””â”€ page.tsx
   â””â”€ layout.tsx


layout.tsx defines 2 slots (<Slot name="analytics" /> and <Slot name="team" />).
Both analytics/page.tsx and team/page.tsx render side by side.

ðŸ‘‰ Useful for dashboards (charts + lists showing together).

-------------------------------------------------------------------------------------------------------------------

ðŸ”¹ 8. Intercepting Routes (advanced ðŸš€):- Let you show a page inside another pageâ€™s context (like a modal).

Syntax: (.), (..), (...)

Example:
app/
â””â”€ feed/
   â”œâ”€ page.tsx       â†’ "/feed"
   â””â”€ @modal/
      â””â”€ (.)photo/
         â””â”€ page.tsx â†’ "/feed/photo/:id"


Clicking a photo in /feed shows it as a modal, without leaving /feed.

ðŸ‘‰ Great for Instagram/Twitter-style modals.

-------------------------------------------------------------------------------------------------------------------

ðŸ”¹ 9. API Routes (backend in Next.js):- Server-side routes for backend logic.

Example:
app/
â””â”€ api/
   â””â”€ posts/
      â””â”€ route.ts

// app/api/posts/route.ts
export async function GET() {
  return Response.json([{ id: 1, title: "Hello World" }]);
}


/api/posts â†’ returns JSON
Can handle GET, POST, PUT, DELETE
Used for databases, auth, server logic.

-------------------------------------------------------------------------------------------------------------------

âœ… Summary

Static â†’ /about
Dynamic â†’ /blog/[slug]
Catch-all â†’ /docs/[...slug]
Optional catch-all â†’ /shop/[[...filters]]
Route groups â†’ (marketing)/about â†’ /about
Nested â†’ /dashboard/settings
Parallel â†’ multiple slots (@analytics, @team)
Intercepting â†’ modals (.)photo
API routes â†’ /api/...